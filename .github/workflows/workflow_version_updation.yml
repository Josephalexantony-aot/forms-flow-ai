name: Update workflow action versions

on:
  schedule:
    - cron: '0 0 1,15 * *'  # Run on 1st and 15th of each month
  workflow_dispatch:
  push:
    branches: [ master, develop, release/* ]


jobs:
  update-workflows:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Validate token permissions
        env:
          token: ${{ secrets.ACCESS_TOKEN }}
        run: |
          if [ -z "$token" ]; then
            echo "Error: ACCESS_TOKEN secret is not set"
            exit 1
          fi
          echo "ACCESS_TOKEN is configured"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.name "Workflow Version Bot"
          git config user.email "${{ secrets.BOT_EMAIL || 'workflow-bot@noreply.github.com' }}"

      - name: Create update branch
        run: |
          BRANCH_NAME="workflow-version-update-$(date +'%Y%m%d-%H%M%S')"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update action versions in workflow files
        id: update-versions
        run: |
          set -e
          UPDATED=0
          UPDATED_FILES=()
          echo "## Updated Files" > update_summary.md
          echo "" >> update_summary.md

          # Define latest versions for common GitHub Actions
          declare -A LATEST_VERSIONS=(
            ["actions/checkout"]="v4"
            ["actions/setup-node"]="v4"
            ["actions/setup-python"]="v5"
            ["actions/cache"]="v4"
            ["actions/upload-artifact"]="v4"
            ["actions/download-artifact"]="v4"
            ["peter-evans/create-pull-request"]="v6"
            ["docker/setup-buildx-action"]="v3"
            ["docker/build-push-action"]="v5"
            ["codecov/codecov-action"]="v4"
            ["actions/setup-java"]="v4"
            ["actions/setup-go"]="v5"
            ["actions/setup-dotnet"]="v4"
            ["github/codeql-action/init"]="v3"
            ["github/codeql-action/analyze"]="v3"
          )

          # Process all workflow files
          for file in $(find .github/workflows -type f \( -name "*.yml" -o -name "*.yaml" \)); do
            echo "Processing $file"
            ORIGINAL_CONTENT=$(cat "$file")
            TEMP_FILE=$(mktemp)
            cp "$file" "$TEMP_FILE"

            FILE_UPDATED=0
            for action in "${!LATEST_VERSIONS[@]}"; do
              version="${LATEST_VERSIONS[$action]}"
              # Use more precise regex to match action versions
              if sed -i -E "s|(uses:[[:space:]]+${action}@)[^[:space:]#]+|\1${version}|g" "$file"; then
                if ! cmp -s "$TEMP_FILE" "$file"; then
                  FILE_UPDATED=1
                  echo "  - Updated ${action} to ${version} in $file"
                fi
              fi
            done

            if [ "$FILE_UPDATED" -eq 1 ]; then
              echo "### Updated: $file" >> update_summary.md
              NEW_CONTENT=$(cat "$file")
              echo "\`\`\`diff" >> update_summary.md
              diff -u <(echo "$ORIGINAL_CONTENT") <(echo "$NEW_CONTENT") | head -20 >> update_summary.md || true
              echo "\`\`\`" >> update_summary.md
              echo "" >> update_summary.md
              UPDATED_FILES+=("$file")
              UPDATED=1
            fi

            rm -f "$TEMP_FILE"
          done

          echo "updated=$UPDATED" >> $GITHUB_OUTPUT
          echo "files_count=${#UPDATED_FILES[@]}" >> $GITHUB_OUTPUT

          if [ "$UPDATED" -eq 0 ]; then
            echo "## No Updates Required" > update_summary.md
            echo "All workflow actions are already using the latest specified versions." >> update_summary.md
          fi

      - name: Commit changes
        if: steps.update-versions.outputs.updated == '1'
        run: |
          # Add all modified workflow files
          git add .github/workflows/*.yml .github/workflows/*.yaml 2>/dev/null || true

          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          COMMIT_MSG="chore: update GitHub Actions workflow versions
          Updated ${{ steps.update-versions.outputs.files_count }} workflow file(s)
          - Automated update on $(date +'%Y-%m-%d %H:%M:%S UTC')
          [skip ci]"
          git commit -m "$COMMIT_MSG"

      - name: Push branch using PAT
        if: steps.update-versions.outputs.updated == '1'
        env:
          token: ${{ secrets.ACCESS_TOKEN }}
        run: |
          echo "Pushing branch..."
          git config --local url."https://x-access-token:${token}@github.com/".insteadOf "https://github.com/"
          git push origin ${{ env.BRANCH_NAME }}

      - name: Prepare PR body
        if: steps.update-versions.outputs.updated == '1'
        run: |
          cat > pr_body.md << 'EOF'
          ## Automated Workflow Version Update

          This automated pull request updates the version tags of GitHub Actions used in workflow files.

          **Triggered by:** ${{ github.event_name == 'schedule' && 'Scheduled update' || github.event_name == 'workflow_dispatch' && 'Manual trigger' || format('Push to {0}', github.ref_name) }}
          **Updated files:** ${{ steps.update-versions.outputs.files_count }}
          **Update date:** $(date +'%Y-%m-%d')

          ### Changes Summary
          EOF
          cat update_summary.md >> pr_body.md
          cat >> pr_body.md << 'EOF'

          ### Review Checklist
          - [ ] Review the updated versions for compatibility
          - [ ] Ensure all workflows still function correctly
          - [ ] Check for any breaking changes in the updated actions
          - [ ] Verify that pinned versions are intentional

          ### What's Changed
          This workflow automatically updates the following GitHub Actions to their latest stable versions:
          - actions/checkout
          - actions/setup-node
          - actions/setup-python
          - actions/cache
          - actions/upload-artifact
          - actions/download-artifact
          - peter-evans/create-pull-request
          - docker/setup-buildx-action
          - docker/build-push-action
          - codecov/codecov-action

          ---
          *This PR was automatically generated by the workflow version updater*
          EOF

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: steps.update-versions.outputs.updated == '1'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: "Version: update GitHub Actions versions (${{ steps.date.outputs.date }})"
          body-path: pr_body.md
          base: develop
          labels: |
            automation
            workflows
            dependencies
            maintenance
          draft: false
          delete-branch: true

      - name: Output results
        run: |
          if [ "${{ steps.update-versions.outputs.updated }}" == "1" ]; then
            echo "‚úÖ Successfully created PR for workflow updates"
            echo "üìù Updated ${{ steps.update-versions.outputs.files_count }} file(s)"
            echo "üîó PR will be available in the repository"
          else
            echo "‚úÖ No updates were needed - all actions are up to date"
            echo "üìÖ Next check: $(date -d '+15 days' +'%Y-%m-%d') or on next push"
          fi

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "üîÑ Cleaning up failed workflow run"
          git checkout develop 2>/dev/null || git checkout master 2>/dev/null || true
          git branch -D ${{ env.BRANCH_NAME }} 2>/dev/null || true
          echo "‚ùå Workflow failed - check logs for details"  