"""task_filter_migration

Revision ID: c384c1ce7cd7
Revises: 5ecbbfc545ba
Create Date: 2025-05-21 15:14:15.252972

"""
from alembic import op
import sqlalchemy as sa
import json
from formsflow_api.constants import STATIC_TASK_FILTER_VARIABLES
# revision identifiers, used by Alembic.
revision = 'c384c1ce7cd7'
down_revision = '5ecbbfc545ba'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('filter', 'description')
    op.drop_column('filter', 'resource_id')
    op.drop_column('filter', 'order')

    conn = op.get_bind()

    def get_updated_criteria(criteria):
        """Update criteria to include default values if not present."""
        # Add 'includeAssignedTasks' & 'candidateGroupsExpression' in criteria if not present
        # and remove 'processDefinitionKey', assigneeExpression, and assignee if present.
        updated_criteria = criteria.copy()
        if 'includeAssignedTasks' not in updated_criteria:
            updated_criteria['includeAssignedTasks'] = True
        if 'candidateGroupsExpression' not in updated_criteria:
            updated_criteria['candidateGroupsExpression'] = '${currentUserGroups()}'
        updated_criteria.pop("processDefinitionKey", None)
        updated_criteria.pop("assigneeExpression", None)
        return updated_criteria

    def filter_variables(variables):
        """Remove variables with name 'formName' and 'applicationId."""
        
        # Remove {'name': 'formName', 'label': 'Form Name'}, {'name': 'applicationId', 'label': 'Submission Id'}
        return [
            var for var in variables
            if not (isinstance(var, dict) and var.get('name') in ['formName', 'applicationId'])
        ]

    def convert_variables(variables):
        """Convert existing variables to the new format."""
        # old format: {'name': 'businessOperatingName', 'label': 'Business Operating Name'}
        # new format: {'key': 'businessOperatingName', 'label': 'Business Operating Name', 'name': 'businessOperatingName', 'isChecked': True, 'sortOrder': 0, 'isFormVariable': True}
        # type is not present in old format, so it is not added in new format
        # Since sortOrder is not present in old format, it is set to 0 in new format
        # isFormVariable is set to True
        new_variables = []
        for var in variables:
            if isinstance(var, dict) and 'name' in var:
                new_var = {
                    "key": var['name'],
                    "label": var.get('label', var['name']),
                    "name": var['name'],
                    "isChecked": True,
                    "sortOrder": 0,
                    "isFormVariable": True,
                }
                new_variables.append(new_var)
        return new_variables

    def process_task_filter(conn, task_filter):
        filter_id = task_filter.id
        criteria = task_filter.criteria or {}
        variables = task_filter.variables or []

        updated_criteria = get_updated_criteria(criteria)
        filtered_variables = filter_variables(variables)
        old_variables = convert_variables(filtered_variables)
        final_variables = STATIC_TASK_FILTER_VARIABLES + old_variables
        
        # Convert final variables to JSON string
        # Use PostgreSQL's json_array_elements to reconstruct the array
        variables_json = json.dumps(final_variables)

        # Convert criteria to JSON string
        criteria_json = json.dumps(updated_criteria)
        stmt = sa.text("""
            UPDATE public.filter
            SET criteria = CAST(:criteria AS json),
                variables = (
                    SELECT array_agg(elem::json)
                    FROM json_array_elements(CAST(:variables AS json)) AS elem
                )::json[]
            WHERE id = :filter_id
        """)
        # Execute the update statement with parameters
        conn.execute(stmt, {
            "criteria": criteria_json,
            "variables": variables_json,
            "filter_id": filter_id
        })

    # Process each task filter to update criteria and variables
    # and remove unnecessary fields
    task_filters = conn.execute(
        sa.text("""SELECT * FROM public.filter 
        WHERE filter_type = 'TASK' AND status='active' """)).fetchall()
    for task_filter in task_filters:
        process_task_filter(conn, task_filter)
    
    op.drop_column('filter', 'task_visible_attributes')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('filter', sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=True, comment='Display order'))
    op.add_column('filter', sa.Column('resource_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('filter', sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('filter', sa.Column('task_visible_attributes', sa.JSON(), autoincrement=False, nullable=True))
    # ### end Alembic commands ###
